<?php

/**
 * @file
 * Install, update and uninstall functions for the social_geolocation module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function social_geolocation_install() {
  // Enable permissions.
  _social_geolocation_set_permissions();

  // By default we enable the Nominatim provider by leaflet be cause it's free.
  // This is not a dependency because users may want to swap it out.
  // Configuration is installed automatically from the config/optional dir.
  \Drupal::service('module_installer')->install(['geolocation_leaflet']);
}

/**
 * Set the default unit of measurement to kilometers.
 */
function social_geolocation_update_8004(&$sandbox) {
  // Default unit of measurement - Kilometers.
  \Drupal::service('config.factory')->getEditable('social_geolocation.settings')
    ->set('unit_of_measurement', 'km')->save();
}

/**
 * Set the geocoding to enabled by default.
 */
function social_geolocation_update_8005(&$sandbox) {
  \Drupal::service('config.factory')->getEditable('social_geolocation.settings')
    ->set('enabled', TRUE)->save();
}

/**
 * Function to set default permissions.
 */
function _social_geolocation_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    if ($role->id() === 'sitemanager') {
      user_role_grant_permissions('sitemanager', ['set social geolocation settings']);
    }
  }
}

/**
 * Create flexible_group geolocation field if module is enabled.
 */
function social_geolocation_update_8006(&$sandbox) {
  // Install geolocation field for flexible group.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('social_group_flexible_group')) {
    $config_yaml = [
      'langcode' => 'en',
      'status' => TRUE,
      'dependencies' => [
        'config' => [
          'field.storage.group.field_group_geolocation',
          'group.type.flexible_group',
        ],
        'module' => [
          'geolocation',
          'social_group',
          'social_group_flexible_group',
        ],
        'enforced' => [
          'module' => [
            'social_geolocation',
          ],
        ],
      ],
      'id' => 'group.flexible_group.field_group_geolocation',
      'field_name' => 'field_group_geolocation',
      'entity_type' => 'group',
      'bundle' => 'flexible_group',
      'label' => 'Geolocation',
      'description' => '',
      'required' => 'false',
      'translatable' => 'false',
      'default_value' => [],
      'default_value_callback' => '',
      'settings' => [],
      'field_type' => 'geolocation',
    ];

    // Create the field configuration.
    FieldConfig::create(
          $config_yaml
      )->save();
  }

}

/**
 * Create secret_group geolocation field if module is enabled.
 */
function social_geolocation_update_8007(&$sandbox) {
  // Install geolocation field for flexible group.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('social_group_flexible_group')) {
    $config_yaml = [
      'langcode' => 'en',
      'status' => TRUE,
      'dependencies' => [
        'config' => [
          'field.storage.group.field_group_geolocation',
          'group.type.secret_group',
        ],
        'module' => [
          'geolocation',
          'social_group',
          'social_group_secret_group',
        ],
        'enforced' => [
          'module' => [
            'social_geolocation',
          ],
        ],
      ],
      'id' => 'group.secret_group.field_group_geolocation',
      'field_name' => 'field_group_geolocation',
      'entity_type' => 'group',
      'bundle' => 'secret_group',
      'label' => 'Geolocation',
      'description' => '',
      'required' => 'false',
      'translatable' => 'false',
      'default_value' => [],
      'default_value_callback' => '',
      'settings' => [],
      'field_type' => 'geolocation',
    ];

    // Create the field configuration.
    FieldConfig::create(
          $config_yaml
      )->save();
  }

}
