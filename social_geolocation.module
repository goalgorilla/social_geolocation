<?php

/**
 * @file
 * The Social Geolocation module.
 */

use Drupal\address\AddressInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Locale\CountryManager;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\NodeInterface;
use Drupal\profile\Entity\ProfileInterface;
use Drupal\user\Entity\User;

// @todo Add update hook to convert settings to new keys.

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function social_geolocation_group_presave(GroupInterface $group) {
  _social_geolocation_entity_presave($group, 'group');
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function social_geolocation_node_presave(NodeInterface $node) {
  if ($node->getType() == 'event') {
    _social_geolocation_entity_presave($node, 'event');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function social_geolocation_profile_presave(ProfileInterface $profile) {
  _social_geolocation_entity_presave($profile, 'profile');
}

/**
 * Set value to geolocation field based on address input.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   The entity that is being saved.
 * @param string $type
 *   The type of the entity being saved.
 */
function _social_geolocation_entity_presave(FieldableEntityInterface $entity, $type) {
  $field_address = "field_{$type}_address";
  $field_geolocation = "field_{$type}_geolocation";

  // We require both an address field to geocode and a geolocation field to
  // store the result in.
  if (!$entity->hasField($field_address) || !$entity->hasField($field_geolocation)) {
    return;
  }

  $empty_address = $entity->get($field_address)->isEmpty();
  $empty_geolocation = $entity->get($field_geolocation)->isEmpty();
  $is_updating = !empty($entity->original);

  // If the entity has no address and no stored geolocation then there's also
  // nothing to do. Otherwise the geolocation field needs to be updated.
  if ($empty_address && $empty_geolocation) {
    return;
  }

  // If the address hasn't been changed and there's already a geolocation stored
  // then the geolocation doesn't need to be updated.
  if (!$empty_geolocation && $is_updating &&
    $entity->original->get($field_address)->getValue() === $entity->get($field_address)->getValue()) {
    return;
  }

  // If we had a geolocation value but no longer have an address then we clear
  // the geolocation value.
  if ($empty_address && !$empty_geolocation) {
    $entity->set($field_geolocation, NULL);
    return;
  }

  $new_coordinates = NULL;

  // Format address as a string consumable by the geocoding API.
  /** @var \Drupal\address\AddressInterface $address */
  $address = $entity->get($field_address)->first();
  $address = _social_geolocation_address_to_string($address);

  // Convert formatted string to a set of coordinates for the geolocation field.
  $location = _social_geolocation_geocode_address($address);

  // Check whether we should show a help message on failed geolocation.
  $site_manager_assist = \Drupal::config('social_geolocation.settings')->get('site_manager_assistance');

  if (!empty($location)) {
    $new_coordinates = [
      'lat' => $location['lat'],
      'lng' => $location['lng'],
      'lat_sin' => sin(deg2rad($location['lat'])),
      'lat_cos' => cos(deg2rad($location['lat'])),
      'lng_rad' => deg2rad($location['lng']),
    ];
  }
  elseif ($site_manager_assist) {
    $contact = 'site manager';

    // If the private message module is enabled then we create a link to contact
    // the site manager by private message.
    if (\Drupal::moduleHandler()->moduleExists('social_private_message')) {
      $site_manager = \Drupal::config('social_geolocation.settings')->get('site_manager_contact');

      // We can only link to a site manager if we have one configured and
      // it's a valid user id.
      if ($site_manager !== NULL && User::load($site_manager) !== NULL) {
        $contact = Link::createFromRoute($contact, 'private_message.private_message_create', [], [
          'query' => ['recipient' => $site_manager],
        ])->toString();
      }
    }

    \Drupal::messenger()->addWarning(
      t("Unfortunately we can't locate the address you entered. Please update it or contact a @contact if you would like the event to show up in a search by location.", [
        '@contact' => $contact,
      ])
    );
  }

  $entity->set($field_geolocation, $new_coordinates);
}

/**
 * Retrieves the configured Geocoder plugin.
 *
 * @return \Drupal\geolocation\GeocoderInterface|FALSE
 *   Returns the configured geocoder or false if none is configured or the
 *   configured geocoder could not be loaded.
 */
function _social_geolocation_get_geocoder() {
  $geocoder_plugin = &drupal_static(__FUNCTION__);

  if (!isset($geocoder_plugin)) {
    $geocoder_plugin_id = \Drupal::config('social_geolocation.settings')
      ->get('geolocation_provider');

    $geocoder_plugin = \Drupal::service('plugin.manager.geolocation.geocoder')
      ->getGeocoder(
        $geocoder_plugin_id,
        // The configuration object passed to the plugins is not actually used by
        // the geocoders implemented in the Geolocation module. Configuration
        // happens through configuration objects that are loaded directly from the
        // config factory (e.g. see Drupal\geolocation_google_maps\Plugin\geolocation\Geocoder\GoogleGeocodingAPI::geocode()).
        []
      );
  }

  return $geocoder_plugin;
}

/**
 * Convert address to geolocation values.
 *
 * @param string $address
 *   The address that can be given to the Geocoder::geocode method.
 *
 * @return array
 *   An array with a status field and lat/lng values if a geolocation was found.
 */
function _social_geolocation_geocode_address($address) {
  // If there's no address to geocode or we have no geocoder service
  // then there's nothing to do.
  if (empty($address)) {
    return [];
  }

  $geocoder = _social_geolocation_get_geocoder();

  if (empty($geocoder)) {
    return [];
  }

  $result = $geocoder->geocode($address);

  if (empty($result)) {
    return [];
  }

  return $result['location'];
}

/**
 * Converts an address field value to a string for a geocoding API.
 *
 * Uses the formatter provided by the CommerceGuys/Addressing library which
 * takes into account the locale of the selected address. This should result in
 * a proper lef-to-right string that can be consumed by at least Nominatim and
 * the Google Geocoding API.
 *
 * @param \Drupal\address\AddressInterface $address
 *   The address field value array.
 *
 * @return string
 *   The string that can be sent to a geocoding API.
 */
function _social_geolocation_address_to_string(AddressInterface $address) {
  /** @var \CommerceGuys\Addressing\Formatter\FormatterInterface $formatter */
  $formatter = \Drupal::service('social_geolocation.default_address_formatter');

  // Nominatim doesn't handle postal codes for Canada well. See Issue #3086891.
  // To resolve this we remove the postal code before lookup.
  if ($address->getCountryCode() === 'CA') {
    $geocoder = _social_geolocation_get_geocoder();
    if ($geocoder !== FALSE && $geocoder->getPluginId() === 'nominatim') {
      $postal_code = $address->get('postal_code');
      $address->set('postal_code', '');
    }
  }

  // Format the address as a plain-text block.
  // Using the format that's correct for the locale of the address to convert
  // will properly format all parts of the address.
  $formatted_address = $formatter->format($address, ['html' => FALSE]);

  // After the address is formatted, return the postal code to the entity so
  // it's not incorrectly saved.
  if (isset($postal_code)) {
    $address->set('postal_code', $postal_code);
  }

  // Convert newlines to comma separation for use in API queries.
  return str_replace("\n", ', ', $formatted_address);
}
