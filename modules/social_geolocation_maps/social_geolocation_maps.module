<?php

/**
 * @file
 * Contains hook implementations for the Social Geolocation module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function social_geolocation_maps_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.social_geolocation_maps':
      return 'This module provides a Map on the events page. Enable the module and create an event with an address so it shows up on the map.';
  }
  return NULL;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function social_geolocation_maps_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Change title in form for adding Event Maps block on Landing pages.
  if ($context['items']->getName() === 'field_block_reference' ||
    $context['items']->getName() === 'field_block_reference_secondary') {
    $name = $element['plugin_id']['#options']['Basic']['views_block:social_geolocation_leaflet_commonmap_with_marker_icons-block_upcomming_events_map'];

    if ($name !== NULL) {
      $element['plugin_id']['#options']['Basic']['views_block:social_geolocation_leaflet_commonmap_with_marker_icons-block_upcomming_events_map'] = t('Upcoming Events shown on a map');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function social_geolocation_maps_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Due to issues with grouped filters I have to switch >= to < myself when
  // user changes upcoming events to events in the past.
  if ($view->id() === 'social_geolocation_leaflet_commonmap_with_marker_icons' &&
    $view->getDisplay()->display['id'] === 'block_community_events_map') {
    $query_args = $view->getRequest()->get('field_event_date_value');

    // If there are query parameters set for the field_event_date_value we
    // make sure the query reflects this before execution.
    if ($query_args !== NULL) {
      $exposed = $view->getExposedInput();
      $filter = $exposed['field_event_date_value'];

      if ($filter !== NULL) {
        // Grab all the filter options.
        $filter_options = $view->display_handler->getOption('filters');

        // Based on the number from the Grouped value, grab the correct
        // operator.
        $operator = $filter_options['field_event_date_value']['group_info']['group_items'][$query_args]['operator'];

        // Switch the operator field.
        foreach ($query->where[1]['conditions'] as $key => $options) {
          if ($operator !== NULL && strpos($options['field'], 'node__field_event_date.field_event_date_value') !== FALSE) {
            $field = "DATE_FORMAT(node__field_event_date.field_event_date_value, '%Y-%m-%d\T%H:%i:%s') " . $operator . " DATE_FORMAT('" . date('Y-m-d\TH:i:s') . "', '%Y-%m-%d\T%H:%i:%s')";
            $query->where[1]['conditions'][$key]['field'] = $field;
          }
        }
      }
    }
  }
  if ($view->id() === 'social_geolocation_members' &&
    $view->getDisplay()->display['id'] === 'members_map_block') {

    // Do not show users on the map who hide their location.
    if ($uids = social_geolocation_maps_get_user_data_helper()) {
      $query->addWhere(NULL, 'profile.profile_id', $uids, 'NOT IN');
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function social_geolocation_maps_page_attachments_alter(array &$attachments) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // If bigpipe is enabled, the attachments don't get loaded for LU.
  // So this is necessary to fix https://www.drupal.org/node/3018719.
  if ($route_name === 'view.upcoming_events.page_community_events'
    && \Drupal::moduleHandler()->moduleExists('social_geolocation')
    && \Drupal::moduleHandler()->moduleExists('big_pipe')
    && !\Drupal::currentUser()->isAnonymous()) {

    $attachments['#attached']['library'][] = 'geolocation_leaflet/widget.leaflet';
    $attachments['#attached']['library'][] = 'geolocation_leaflet/geolocation.leaflet';
    $attachments['#attached']['library'][] = 'geolocation_leaflet/leaflet.markerclusterer';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_geolocation_maps_form_social_geolocation_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = Drupal::config('social_geolocation.settings');

  $form['members_map'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable members map'),
    '#description' => t('Display map with geolocation of members on the members page'),
    '#default_value' => $config->get('members_map'),
  ];

  $form['#submit'][] = 'social_geolocation_maps_form_social_geolocation_settings_form_submit';
}

/**
 * Form submission handler for social_geolocation_settings().
 */
function social_geolocation_maps_form_social_geolocation_settings_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('social_geolocation.settings')
    ->set('members_map', $form_state->getValue('members_map'))
    ->save();
}

/**
 * Implements hook_block_access().
 */
function social_geolocation_maps_block_access(Block $block, $operation, AccountInterface $account) {
  $block_ids = [
    'views_block:social_geolocation_members-members_map_block',
  ];

  if ($operation == 'view' && in_array($block->getPluginId(), $block_ids)) {
    $config = Drupal::config('social_geolocation.settings');

    if (!empty($config->get('members_map'))) {
      return AccessResult::neutral();
    }
    else {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Helper callback to get all users ids who hide their location.
 */
function social_geolocation_maps_get_user_data_helper() {
  $users_data = \Drupal::service('user.data');
  $users_data = $users_data->get('social_profile_privacy', NULL, 'private_info');

  $private_info = [];

  if (!empty($users_data)) {
    foreach ($users_data as $uid => $user_data) {
      if (empty($user_data['group_profile_contact_info'])) {
        $private_info[] = $uid;
      }
    }
  }
  return $private_info;
}
